from cassandra.cluster import Cluster
from cassandra.auth import PlainTextAuthProvider
import json
import os
from cassandra.query import dict_factory
from src.logger import logging
from src.exception import CustomException
import sys
import pandas as pd


class cassandra_db:

  def __init__(self, keyspace, table_name):
    self.keyspace=keyspace
    self.table_name=table_name
    

  def connect_db(self, token_path='./database'):
    try:
      logging.info("Initiating the database connection procedure")

      # This secure connect bundle is autogenerated when you download your SCB, 
      # if yours is different update the file name below
      cloud_config= {
        'secure_connect_bundle': './database/secure-connect-thyroid-detection-db.zip'
      }


      # This token JSON file is autogenerated when you download your token, 
      # if yours is different update the file name below
      with open(os.path.join(token_path,"thyroid_detection_db_token.json")) as f:
          secrets = json.load(f)

      CLIENT_ID = secrets["clientId"]
      CLIENT_SECRET = secrets["secret"]

      auth_provider = PlainTextAuthProvider(CLIENT_ID, CLIENT_SECRET)
      cluster = Cluster(cloud=cloud_config, auth_provider=auth_provider)
      session = cluster.connect()

      row= session.execute("select release_version from system.local").one()

      if row: 
        print("Connection established...")
        logging.info("Database connection established")

      else:
        try:
            pass
        except Exception as e:
            logging.info("Database connection failed to establish")
            raise CustomException(e,sys)
      
      return session
    
    except Exception as e:
      raise CustomException(e,sys)

  def create_tb(self, keyspace, table_name):
    
    logging.info("Initiating table creation process")
    try:
      self.session=self.connect_db()

      logging.info(f"Using keyspace: {self.keyspace}")
      self.session.execute(f"USE {self.keyspace};")

      logging.info(f"Creating table {self.table_name}")
      self.session.execute(f"""CREATE TABLE {self.keyspace}.{self.table_name}(
                          idx text, age text, sex text,
                          on_thyroxine text, query_on_thyroxine text,
                          on_antithyroid_medication text, sick text,
                          pregnant text, thyroid_surgery text,
                          I131_treatment text, query_hypothyroid text,
                          query_hyperthyroid text, lithium text,
                          goitre text, tumor text, hypopituitary text,
                          psych text, TSH_measured text, TSH text,
                          T3_measured text, T3 text, TT4_measured text,
                          TT4 text, T4U_measured text, T4U text,
                          FTI_measured text, FTI text, TBG_measured text, TBG text,
                          referral_source text, disease text,
                          PRIMARY KEY (idx)
        );""")
      print("Table created successfully")
      logging.info(f"Table: {self.table_name} created successfully")

    except Exception as e:
      logging.info("Table creation failed")
      raise CustomException(e,sys)


  def read_table(self):
    logging.info("Initiaing reading data table")
    try:
      self.session=self.connect_db()
      self.session.row_factory=dict_factory
      self.row=self.session.execute(f"""SELECT * FROM {self.keyspace}.{self.table_name}""")
      logging.info("Data reading completed successfully")
      return self.row
    except Exception as e:
      logging.info("Data reading unsuccessful")
      raise CustomException(e,sys)
  

  def insert(self, csv_file_path, csv_file_name):
    self.file_name=csv_file_name
    self.file_path=csv_file_path
    logging.info("Initiating data insertion process")

    try:
      self.session=self.connect_db()

      logging.info("Data preparation initiated")
      self.prepared=self.session.prepare(f"""
        INSERT INTO {self.keyspace}.{self.table_name} (idx, age, sex,
                          on_thyroxine, query_on_thyroxine,
                          on_antithyroid_medication, sick,
                          pregnant, thyroid_surgery,
                          I131_treatment, query_hypothyroid,
                          query_hyperthyroid, lithium,
                          goitre, tumor, hypopituitary,
                          psych, TSH_measured, TSH,
                          T3_measured, T3, TT4_measured,
                          TT4, T4U_measured, T4U,
                          FTI_measured, FTI, TBG_measured, TBG,
                          referral_source, disease)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
      """)


      logging.info("Executing insertion of data")
      with open(os.path.join(self.file_path,self.file_name)) as f:
        for row in f:
          row=row.split(",")

          idx, age, sex, on_thyroxine, query_on_thyroxine = row[0], row[1], row[2], row[3], row[4]
          on_antithyroid_medication, sick, pregnant, thyroid_surgery, I131_treatment = row[5], row[6], row[7], row[8], row[9]
          query_hypothyroid, query_hyperthyroid, lithium, goitre, tumor = row[10], row[11], row[12], row[13], row[14]
          hypopituitary, psych, TSH_measured, TSH = row[15], row[16], row[17], row[18]
          T3_measured, T3, TT4_measured, TT4, T4U_measured, T4U = row[19], row[20], row[21], row[22], row[23], row[24]
          FTI_measured, FTI, TBG_measured,TBG, referral_source, disease = row[25], row[26], row[27], row[28], row[29], row[30]
          

          print(f"Row-{idx} inserted to table")
          self.session.execute(self.prepared, [idx, age, sex,on_thyroxine, query_on_thyroxine,on_antithyroid_medication,
                sick,pregnant, thyroid_surgery,I131_treatment, query_hypothyroid,
                query_hyperthyroid, lithium,goitre, tumor, hypopituitary,psych, 
                TSH_measured, TSH,T3_measured, T3, TT4_measured,TT4, T4U_measured, 
                T4U,FTI_measured, FTI, TBG_measured, TBG,referral_source, disease])

      print("Insertion Completed successfully!!")
      logging("Data insertion to database completed successfuly")
      return None
    
    except Exception as e:
      logging("Data insertion to database failed")
      raise CustomException(e,sys)
    

  def drop_tb(self):
    logging.info("Initiaing table drop process")

    try:
      self.session=self.connect_db()
      self.session.execute(f"DROP TABLE {self.keyspace}.{self.table_name};")
      print(f"Table {self.table_name} Dropped successfully!!")
    
      logging.info(f"{self.table_name} dropped successfully")
    except Exception as e:
      logging.info("Failed to drop table")
      raise CustomException(e,sys)


     




# if __name__=='__main__':
  # Creating instance of database
  # db=cassandra_db(keyspace='thyroid_disease',table_name='raw_data')

  # # Query to get keyspace information present at database
  # row=session.execute("SELECT * FROM system_schema.keyspaces;")


  # # To dtop table from database
  # db.drop_tb()

  # # To create table
  # db.create_tb('thyroid_disease','raw_data')

  # # To insert data into table
  # db.insert(os.path.join(os.getcwd(),'database'),'raw_data.csv')

  # # To read data from table in pandas dataframe format
  # row=db.read_table()  
  # df=pd.DataFrame(row)
  # print(df.head(50))